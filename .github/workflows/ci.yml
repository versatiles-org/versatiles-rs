name: CI

on:
  push:
    branches:
      - "**"
    tags-ignore:
      - "**" # Don't run twice on commits with tags
    paths-ignore:
      - "docker/**"
      - "**.Dockerfile"
      - "**.md"
  pull_request:
  schedule:
    - cron: "15 6 * * 2"
  workflow_dispatch:

permissions:
  contents: read

env:
  CARGO_TERM_COLOR: always

jobs:
  linux:
    name: "Test on Linux"
    runs-on: ubuntu-latest
    steps:
      - name: Check out
        uses: actions/checkout@v5

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy

      - name: Resolve GDAL version & install deps
        id: gdal-version
        shell: bash
        run: |
          source ./scripts/install-gdal.sh
          detect_platform
          resolve_gdal_version
          install_deps
          echo "GDAL_VERSION=$GDAL_VERSION" >> "$GITHUB_ENV"

      - name: Restore GDAL toolchain cache
        id: restore-gdal-cache
        uses: actions/cache/restore@v4
        with:
          path: .toolchain/gdal
          key: ${{ runner.os }}-gdal-${{ env.GDAL_VERSION }}-${{ hashFiles('scripts/install-gdal.sh') }}

      - name: Build/Install GDAL (on cache miss)
        if: steps.restore-gdal-cache.outputs.cache-hit != 'true'
        run: |
          ./scripts/install-gdal.sh

      - name: Show GDAL version (cached or built)
        run: ./.toolchain/gdal/bin/gdal-config --version

      - name: Export GDAL env for cargo steps
        shell: bash
        run: |
          GDAL_PREFIX="${{ github.workspace }}/.toolchain/gdal"
          echo "GDAL_PREFIX=${GDAL_PREFIX}" >> "$GITHUB_ENV"
          echo "GDAL_CONFIG=${GDAL_PREFIX}/bin/gdal-config" >> "$GITHUB_ENV"
          echo "GDAL_DATA=${GDAL_PREFIX}/share/gdal" >> "$GITHUB_ENV"
          echo "GDAL_INCLUDE_DIR=${GDAL_PREFIX}/include" >> "$GITHUB_ENV"
          echo "GDAL_LIB_DIR=${GDAL_PREFIX}/lib" >> "$GITHUB_ENV"
          echo "PKG_CONFIG_PATH=${GDAL_PREFIX}/lib/pkgconfig" >> "$GITHUB_ENV"
          echo "LD_LIBRARY_PATH=${GDAL_PREFIX}/lib" >> "$GITHUB_ENV"
          echo "PROJ_DATA=/usr/share/proj" >> "$GITHUB_ENV"
          # libclang for bindgen
          if command -v llvm-config >/dev/null 2>&1; then
            echo "LIBCLANG_PATH=$(llvm-config --libdir)" >> "$GITHUB_ENV"
          else
            for d in /usr/lib/llvm-*/lib; do
              if [ -d "$d" ]; then echo "LIBCLANG_PATH=$d" >> "$GITHUB_ENV"; break; fi
            done
          fi
          echo "BINDGEN_EXTRA_CLANG_ARGS=-I${GDAL_PREFIX}/include" >> "$GITHUB_ENV"

      - name: Save GDAL toolchain cache
        if: steps.restore-gdal-cache.outputs.cache-hit != 'true'
        uses: actions/cache/save@v4
        with:
          path: .toolchain/gdal
          key: ${{ steps.restore-gdal-cache.outputs.cache-primary-key }}

      - name: Cache cargo (rust-cache)
        uses: Swatinem/rust-cache@v2
        with:
          shared-key: linux-gdal-${{ env.GDAL_VERSION }}
          cache-on-failure: true

      - name: Run fmt
        run: cargo fmt -- --check

      - name: Run check
        run: cargo check --workspace --all-features --all-targets

      - name: Run clippy /
        run: cargo clippy --workspace --all-features --all-targets -- -D warnings

      - name: Run test /
        run: cargo test --workspace --all-features --all-targets

      - name: Install Cargo Coverage
        uses: taiki-e/install-action@cargo-llvm-cov

      - name: Cargo Coverage
        run: cargo llvm-cov test --workspace --all-features --tests --lcov --output-path ./lcov.info

      - name: Upload Coverage
        uses: codecov/codecov-action@v5
        with:
          files: ./lcov.info
          token: ${{ secrets.CODECOV_TOKEN }}
          verbose: true

  windows:
    name: 'Test on Windows'
    runs-on: windows-latest
    steps:
      - name: Check out
        uses: actions/checkout@v5

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy

      - name: Cache cargo (rust-cache)
        uses: Swatinem/rust-cache@v2
        with:
          shared-key: windows-x86_64
          cache-on-failure: true

      - name: Run Fmt, Clippy and Test
        shell: pwsh
        working-directory: ${{ env.GITHUB_WORKSPACE }}
        run: .\scripts\test.ps1
