name: Release

on:
  push:
    tags:
      - "v*"
  workflow_dispatch:
    inputs:
      build_linux_x86:
        description: "Build Linux x86"
        type: boolean
        required: false
        default: true
      build_linux_arm:
        description: "Build Linux ARM"
        type: boolean
        required: false
        default: true
      build_macos:
        description: "Build macOS"
        type: boolean
        required: false
        default: true
      build_windows:
        description: "Build Windows"
        type: boolean
        required: false
        default: true

permissions:
  contents: write
  packages: write

env:
  CARGO_TERM_COLOR: always

jobs:
  prepare:
    name: Prepare release
    runs-on: ubuntu-latest
    if: github.event.base_ref == 'refs/heads/main'
    outputs:
      tag: ${{ steps.create_release.outputs.tag }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - id: create_release
        name: Get version via latest git tag
        env:
          GH_TOKEN: ${{ github.token }}
        run: ./scripts/workflow-create-release.sh

  build-linux-arm:
    name: Build Linux ARM
    runs-on: buildjet-8vcpu-ubuntu-2204-arm
    needs: prepare
    env:
      BUILD_ENABLED: ${{ github.event_name != 'workflow_dispatch' || inputs.build_linux_arm }}
    strategy:
      fail-fast: false
      matrix:
        libc: [gnu, musl]
    steps:
      - name: Gate — fast pass when deselected
        if: env.BUILD_ENABLED != 'true'
        run: echo "Linux ARM build deselected via workflow_dispatch; fast-passing job."

      - name: Checkout code
        if: env.BUILD_ENABLED == 'true'
        uses: actions/checkout@v5

      - name: Login to Docker Hub
        if: env.BUILD_ENABLED == 'true'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set up Docker Buildx
        if: env.BUILD_ENABLED == 'true'
        uses: docker/setup-buildx-action@v3

      - name: Test and Build Binary
        if: env.BUILD_ENABLED == 'true'
        run: |
          docker buildx build \
            --platform="linux/arm64" \
            --file="docker/build-linux.Dockerfile" \
            --build-arg="ARCH=aarch64" \
            --build-arg="LIBC=${{ matrix.libc }}" \
            --progress="plain" \
            --cache-from=type=gha \
            --cache-to=type=gha,mode=max \
            --output="type=local,dest=output/" \
            .

      - name: Pack and upload
        if: env.BUILD_ENABLED == 'true'
        env:
          GH_TOKEN: ${{ github.token }}
        run: ./scripts/workflow-pack-upload.sh "output" "linux-${{ matrix.libc }}-aarch64" "${{ needs.prepare.outputs.tag }}"

  build-linux-x86:
    name: Build Linux x86
    runs-on: buildjet-8vcpu-ubuntu-2204
    needs: prepare
    env:
      BUILD_ENABLED: ${{ github.event_name != 'workflow_dispatch' || inputs.build_linux_x86 }}
    strategy:
      fail-fast: false
      matrix:
        libc: [gnu, musl]
    steps:
      - name: Gate — fast pass when deselected
        if: env.BUILD_ENABLED != 'true'
        run: echo "Linux x86 build deselected via workflow_dispatch; fast-passing job."

      - name: Checkout code
        if: env.BUILD_ENABLED == 'true'
        uses: actions/checkout@v5

      - name: Login to Docker Hub
        if: env.BUILD_ENABLED == 'true'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set up Docker Buildx
        if: env.BUILD_ENABLED == 'true'
        uses: docker/setup-buildx-action@v3

      - name: Test and Build Binary
        if: env.BUILD_ENABLED == 'true'
        run: |
          docker buildx build \
            --platform="linux/amd64" \
            --file="docker/build-linux.Dockerfile" \
            --build-arg="ARCH=x86_64" \
            --build-arg="LIBC=${{ matrix.libc }}" \
            --progress="plain" \
            --cache-from=type=gha \
            --cache-to=type=gha,mode=max \
            --output="type=local,dest=output/" \
            .

      - name: Pack and upload
        if: env.BUILD_ENABLED == 'true'
        env:
          GH_TOKEN: ${{ github.token }}
        run: ./scripts/workflow-pack-upload.sh "output" "linux-${{ matrix.libc }}-x86_64" "${{ needs.prepare.outputs.tag }}"

  build-macos:
    name: Build MacOS
    runs-on: macos-latest
    needs: prepare
    env:
      BUILD_ENABLED: ${{ github.event_name != 'workflow_dispatch' || inputs.build_macos }}
    strategy:
      fail-fast: false
      matrix:
        arch: [x86_64, aarch64]
    steps:
      - name: Gate — fast pass when deselected
        if: env.BUILD_ENABLED != 'true'
        run: echo "macOS build deselected via workflow_dispatch; fast-passing job."

      - name: Checkout code
        if: env.BUILD_ENABLED == 'true'
        uses: actions/checkout@v5

      - name: Install Rust toolchain
        if: env.BUILD_ENABLED == 'true'
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.arch }}-apple-darwin

      - name: Cache cargo/macOS
        if: env.BUILD_ENABLED == 'true'
        uses: Swatinem/rust-cache@v2
        with:
          shared-key: macos-${{ matrix.arch }}

      - name: Run Tests
        if: env.BUILD_ENABLED == 'true'
        run: |
          cargo test --bins
          cargo test --lib

      - name: Build Binary
        if: env.BUILD_ENABLED == 'true'
        run: cargo build --bin "versatiles" --package "versatiles" --release --target "${{ matrix.arch }}-apple-darwin"

      - name: Pack and upload
        if: env.BUILD_ENABLED == 'true'
        env:
          GH_TOKEN: ${{ github.token }}
        run: ./scripts/workflow-pack-upload.sh "target/${{ matrix.arch }}-apple-darwin/release" "macos-${{ matrix.arch }}" "${{ needs.prepare.outputs.tag }}"

  build-windows:
    name: Build Windows
    runs-on: windows-latest
    needs: prepare
    env:
      BUILD_ENABLED: ${{ github.event_name != 'workflow_dispatch' || inputs.build_windows }}
    strategy:
      fail-fast: false
      matrix:
        arch: [x86_64, aarch64]
    steps:
      - name: Gate — fast pass when deselected
        if: env.BUILD_ENABLED != 'true'
        run: echo "Windows build deselected via workflow_dispatch; fast-passing job."

      - name: Checkout code
        if: env.BUILD_ENABLED == 'true'
        uses: actions/checkout@v5

      - name: Install Rust toolchain
        if: env.BUILD_ENABLED == 'true'
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.arch }}-pc-windows-msvc

      - name: Cache cargo/Windows
        if: env.BUILD_ENABLED == 'true'
        uses: Swatinem/rust-cache@v2
        with:
          shared-key: windows-${{ matrix.arch }}

      - name: Run Tests
        if: env.BUILD_ENABLED == 'true' && matrix.arch == 'x86_64'
        run: |
          cargo test --bins
          cargo test --lib

      - name: Build binary
        if: env.BUILD_ENABLED == 'true'
        run: cargo build --bin "versatiles" --package "versatiles" --release --target "${{ matrix.arch }}-pc-windows-msvc"

      - name: Pack and upload
        if: env.BUILD_ENABLED == 'true'
        shell: pwsh
        env:
          GH_TOKEN: ${{ github.token }}
        run: scripts\workflow-pack-upload.ps1 "target\${{ matrix.arch }}-pc-windows-msvc\release" "windows-${{ matrix.arch }}" "${{ needs.prepare.outputs.tag }}"

  finish-release:
    name: Finish release
    needs:
      - prepare
      - build-linux-x86
      - build-linux-arm
      - build-macos
      - build-windows
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set Environment Variables
        run: |
          echo "TAG=${{ needs.prepare.outputs.tag }}" >> $GITHUB_ENV

      - name: Update and Release Install scripts
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          mkdir -p release
          OLD_URL="versatiles-org/versatiles-rs/releases/latest/download/"
          NEW_URL="versatiles-org/versatiles-rs/releases/download/${TAG}/"
          sed "s|${OLD_URL}|${NEW_URL}|g" ./scripts/install-unix.sh > ./release/install-unix.sh
          sed "s|${OLD_URL}|${NEW_URL}|g" ./scripts/install-windows.ps1 > ./release/install-windows.ps1
          gh auth status -h github.com
          gh release upload "${TAG}" ./release/install-unix.sh --clobber
          gh release upload "${TAG}" ./release/install-windows.ps1 --clobber

      - name: Finalize the release
        env:
          GH_TOKEN: ${{ github.token }}
        run: gh release edit "${{ needs.prepare.outputs.tag }}" --draft=false --latest --prerelease=false

      - name: Trigger Docker release
        env:
          GH_TOKEN: ${{ secrets.PAT_TOKEN }}
        run: |
          gh auth status -h github.com
          gh workflow view release.yml --repo versatiles-org/versatiles-docker --yaml
          gh workflow run release.yml --repo versatiles-org/versatiles-docker --ref main

      - name: Trigger Homebrew formula update
        env:
          GH_TOKEN: ${{ secrets.PAT_TOKEN }}
        run: gh workflow run update_formula.yml --repo versatiles-org/homebrew-versatiles --ref main
