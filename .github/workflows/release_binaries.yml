name: Build and release binaries

on:
  push:
    branches:
      - "feat-workflow-release-binaries"
  release:
    types:
      - created
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always

jobs:
  prepare:
    name: Build release binary
    runs-on: ubuntu-latest
    outputs:
      release_tag: $RELEASE_TAG
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Get release tag
        id: get_release
        run: echo 'RELEASE_TAG=v$(cat Cargo.toml | sed -n "s/^version *= *\"\(.*\)\"/\1/p")' >> $GITHUB_ENV

      - name: Create release if needed
        run: gh release create $RELEASE_TAG || true

  build-linux:
    runs-on: ubuntu-latest
    needs: prepare
    strategy:
      matrix:
        include:
          - arch: "x86_64"
            libc: "gnu"
          - arch: "x86_64"
            libc: "musl"
          #- arch: "i686"
          #  libc: "musl"
          #- arch: "arm"
          #  libc: "gnueabihf"
          #- arch: "arm"
          #  libc: "musleabi"
          #- arch: "arm"
          #  libc: "musleabihf"
          #- arch: "armv7"
          #  libc: "musleabihf"
      fail-fast: false
    steps:
      - name: Install musl tools
        if: ${{ contains(matrix.libc, 'musl') }}
        run: sudo apt-get install -y musl-tools

      - name: Install arm tools
        if: ${{ contains(matrix.arch, 'arm') }}
        run: sudo apt-get install -y binutils-arm-linux-gnueabihf

      - name: Install aarch64 tools
        if: ${{ contains(matrix.arch, 'aarch64') }}
        run: sudo apt-get install -y binutils-aarch64-linux-gnu

      #- name: Install sqlite-dev
      #  run: sudo apt-get install -y libsqlite3-dev

      - name: Get repo
        uses: actions/checkout@v3

      - name: Get Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: ${{ matrix.arch }}-unknown-linux-${{ matrix.libc }}

      - name: Install cross
        run: cargo install cross

      - name: Build binary
        run: cross build -vvv --release --all-features --target ${{ matrix.arch }}-unknown-linux-${{ matrix.libc }}

      - name: Upload binary
        uses: actions/upload-artifact@v3
        with:
          name: "versatiles-linux-${{ matrix.arch }}-${{ matrix.libc }}"
          path: "target/${{ matrix.arch }}-unknown-linux-${{ matrix.libc }}/release/versatiles"

  #  build-macos:
  #    runs-on: macos-latest
  #    needs: prepare
  #    steps:
  #      - uses: actions/checkout@v3
  #
  #      - uses: actions-rs/toolchain@v1
  #        with:
  #          profile: minimal
  #          toolchain: stable
  #          default: true
  #
  #      - name: Build binary
  #        uses: actions-rs/cargo@v1
  #        with:
  #          command: build
  #          args: --release --features=bin
  #          use-cross: true
  #
  #      - name: Optimize and package binary
  #        run: |
  #          cd target/release
  #          strip versatiles
  #          chmod +x versatiles
  #          mkdir dmg
  #          mv versatiles dmg/
  #          hdiutil create -fs HFS+ -srcfolder dmg -volname versatiles versatiles.dmg
  #
  #      - name: Upload binary
  #        if: false
  #        uses: actions/upload-release-asset@v1
  #        env:
  #          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #        with:
  #          asset_name: versatiles-${{needs.prepare.outputs.tag_name}}-macos-x86_64.dmg
  #          asset_path: target/release/versatiles.dmg
  #          upload_url: ${{needs.prepare.outputs.upload_url}}
  #          asset_content_type: application/octet-stream
  #
  #  build-windows:
  #    runs-on: windows-latest
  #    needs: prepare
  #    steps:
  #      - uses: actions/checkout@v3
  #
  #      - uses: actions-rs/toolchain@v1
  #        with:
  #          profile: minimal
  #          toolchain: stable
  #          default: true
  #
  #      - name: Build binary
  #        uses: actions-rs/cargo@v1
  #        with:
  #          command: build
  #          args: --release --features=bin
  #          use-cross: true
  #
  #      - name: Upload binary
  #        if: false
  #        uses: actions/upload-release-asset@v1
  #        env:
  #          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #        with:
  #          asset_name: versatiles-${{needs.prepare.outputs.tag_name}}-windows-x86_64.exe
  #          asset_path: target/release/versatiles.exe
  #          upload_url: ${{needs.prepare.outputs.upload_url}}
  #          asset_content_type: application/octet-stream

  upload-release:
    needs:
      - build-linux
      #- build-macos
      #- build-windows
    runs-on: ubuntu-latest
    env:
      GH_TOKEN: ${{ github.token }}
    steps:
      # - uses: actions/checkout@v3
      - uses: actions/download-artifact@v3
        with:
          path: ~/release
      - name: Upload binary
        working-directory: ~/release
        run: |
          # Create checksums
          find . -maxdepth 1 -type f -exec echo "sha256sum '{}' > '{}'.sha256" \; | sh
          gh release upload $RELEASE_TAG --clobber *
          # gh release edit $RELEASE_TAG --draft=false --latest --prerelease=false
