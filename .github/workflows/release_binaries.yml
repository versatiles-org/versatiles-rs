name: Build and release binaries

on:
  push:
    branches:
      - "feat-workflow-release-binaries"
    #  - "main"
    #tags:
    #  - "v*.*.*"
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always
  GH_TOKEN: ${{ github.token }}

jobs:
  prepare:
    name: Prepare release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - run: git version
      - run: git remote -v
      - run: git log -n 3
      - run: git tag
      - run: git tag -l 'v*.*.*'
      - run: git tag -l 'v*.*.*' | tail -n 1
      - run: echo -n "git_tag=$(git tag -l 'v*.*.*' | tail -n 1)"

      - name: Get version via git tag
        run: echo -n "git_tag=$(git tag -l 'v*.*.*' | tail -n 1)" >> "$GITHUB_ENV"'

      - name: Get version via cargo.toml
        run: cat Cargo.toml | sed -n "s/^version *= *\"\(.*\)\"/new_tag=v\1/p" | tr -d '\n' >> "$GITHUB_ENV"

      - name: Compare versions
        if: ${{ env.git_tag != env.new_tag }}
        run: echo "Latest Git tag (${{ env.new_tag }}) is not current cargo version (${{ env.new_tag }})"; exit1

      - name: Create release
        run: gh release create --draft --verify-tag "${{ env.new_tag }}"

  build-linux:
    runs-on: ubuntu-latest
    needs: prepare
    strategy:
      matrix:
        include:
          - arch: "x86_64"
            libc: "gnu"
          #- arch: "aarch64"
          #  libc: "gnu"
    steps:
      - name: Install aarch64 tools
        if: ${{ contains(matrix.arch, 'aarch64') }}
        run: sudo apt-get install -y binutils-aarch64-linux-gnu

      - uses: actions/checkout@v3

      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          target: ${{ matrix.arch }}-unknown-linux-${{ matrix.libc }}
          default: true

      - name: Install cross
        run: cargo install cross

      - name: Build binary
        run: cross build --release --all-features

      - name: Upload binary
        uses: actions/upload-artifact@v3
        with:
          name: "versatiles-linux-${{ matrix.arch }}-${{ matrix.libc }}"
          path: "target/release/versatiles"

  build-macos:
    runs-on: macos-latest
    needs: prepare
    strategy:
      matrix:
        include:
          - arch: "x86_64"
          - arch: "aarch64"
    steps:
      - uses: actions/checkout@v3

      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          target: ${{ matrix.arch }}-apple-darwin
          default: true

      - name: Build binary
        run: cargo build --release --all-features

      - name: Upload binary
        uses: actions/upload-artifact@v3
        with:
          name: "versatiles-macos-${{ matrix.arch }}"
          path: "target/release/versatiles"

  build-windows:
    if: false
    runs-on: windows-latest
    needs: prepare
    strategy:
      matrix:
        include:
          - arch: "x86_64"
            libc: "msvc"
          - arch: "aarch64"
            libc: "msvc"
    steps:
      - uses: actions/checkout@v3

      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          target: ${{ matrix.arch }}-pc-windows-${{ matrix.libc }}
          default: true

      - name: Build binary
        run: cargo build --release --all-features

      - name: Upload binary
        uses: actions/upload-artifact@v3
        with:
          name: "versatiles-windows-${{ matrix.arch }}.exe"
          path: "target/release/versatiles.exe"

  upload-release:
    name: Upload release
    needs:
      - prepare
      - build-linux
      - build-macos
      #- build-windows
    runs-on: ubuntu-latest
    env:
      GH_TOKEN: ${{ github.token }}
    steps:
      - uses: actions/checkout@v3

      - uses: actions/download-artifact@v3
        with:
          path: release

      - name: Upload binary
        run: |
          cd release
          find . -maxdepth 1 -type f -exec echo "sha256sum '{}' > '{}'.sha256" \; | sh
          gh release upload "${{ env.new_tag }}" --clobber *
          gh release edit "${{ env.new_tag }}" --draft=false --latest --prerelease=false
