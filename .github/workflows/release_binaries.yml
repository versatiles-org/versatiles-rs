name: Build and release binaries

on:
  push:
    tags:
      - "v*.*.*"
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always
  GH_TOKEN: ${{ github.token }}

jobs:
  prepare:
    name: Prepare release
    runs-on: ubuntu-latest
    outputs:
      tag: ${{ steps.result.outputs.tag }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Get version via latest git tag
        run: curl https://api.github.com/repos/versatiles-org/versatiles-rs/tags | jq -r '"git_tag=" + first(.[] | .name | select(startswith("v")))' >> "$GITHUB_ENV"

      - name: Get version via cargo.toml
        run: cat Cargo.toml | sed -n "s/^version *= *\"\(.*\)\"/version=v\1/p" | tr -d '\n' >> "$GITHUB_ENV"

      - name: Compare versions
        if: env.git_tag != env.version
        run: echo "Current cargo version (${{ env.version }}) is not pushed tag (${{ env.git_tag }})"; exit 1

      - name: Try to create release
        run: 'gh release create "${{ env.version }}" --title "${{ env.version }}" -n "new release: ${{ env.version }}" --draft --prerelease || true'

      - name: Check release
        run: gh release view "${{ env.version }}"

      - name: Set output variable
        id: result
        run: echo "tag=${{ env.git_tag }}" >> "$GITHUB_OUTPUT"

  build-linux:
    name: Build Linux
    runs-on: ubuntu-latest
    needs: prepare
    strategy:
      matrix:
        arch: [x86_64, aarch64]
        libc: [gnu]
    steps:
      - uses: actions/checkout@v3

      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          target: ${{ matrix.arch }}-unknown-linux-${{ matrix.libc }}
          default: true

      - name: Install cross
        run: cargo install cross

      - name: Test binary
        run: cross test --release --all-features --target-dir target

      - name: Build binary
        run: cross build --release --all-features --target-dir target

      - name: Pack and upload
        run: |
          find .
          cd target/release
          FILENAME="versatiles-linux-${{ matrix.arch }}-${{ matrix.libc }}.tar.gz"
          tar -czf "$FILENAME" "versatiles"
          gh release upload "${{ needs.prepare.outputs.tag }}" "$FILENAME" --clobber

  build-macos:
    name: Build MacOS
    runs-on: macos-latest
    needs: prepare
    strategy:
      matrix:
        arch: [x86_64, aarch64]
    steps:
      - uses: actions/checkout@v3

      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          target: ${{ matrix.arch }}-apple-darwin
          default: true

      - name: Test binary
        run: cargo test --release --all-features

      - name: Build binary
        run: cargo build --release --all-features

      - name: Pack and upload
        run: |
          find .
          cd target/release
          FILENAME="versatiles-macos-${{ matrix.arch }}.tar.gz"
          tar -czf "$FILENAME" "versatiles"
          gh release upload "${{ needs.prepare.outputs.tag }}" "$FILENAME" --clobber

  build-windows:
    if: false
    name: Build Windows
    runs-on: windows-latest
    needs: prepare
    strategy:
      matrix:
        arch: [x86_64, aarch64]
        libc: [msvc]
    steps:
      - uses: actions/checkout@v3

      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          target: ${{ matrix.arch }}-pc-windows-${{ matrix.libc }}
          default: true

      - name: Test binary
        run: cargo test --release --all-features

      - name: Build binary
        run: cargo build --release --all-features

      - name: Pack and upload
        run: |
          find .
          cd target/release
          FILENAME="versatiles-windows-${{ matrix.arch }}.tar.gz"
          tar -czf "$FILENAME" "versatiles.exe"
          gh release upload "${{ needs.prepare.outputs.tag }}" "$FILENAME" --clobber

  finish-release:
    name: Finish release
    needs:
      - prepare
      - build-linux
      - build-macos
      #- build-windows
    runs-on: ubuntu-latest
    env:
      GH_TOKEN: ${{ github.token }}
    steps:
      - uses: actions/checkout@v3

      - name: Finish release
        run: |
          gh release edit "${{ needs.prepare.outputs.tag }}" --draft=false --latest --prerelease=false --verify-tag
